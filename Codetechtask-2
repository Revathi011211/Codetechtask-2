import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

# Step 1: Sample Data for Classification
data = {
    'Feature1': [2, 3, 5, 7, 9, 11, 13, 15, 17, 19],
    'Feature2': [1, 5, 2, 6, 3, 7, 4, 8, 5, 9],
    'Label': [0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
}

# Convert data to DataFrame
df = pd.DataFrame(data)

# Step 2: Splitting the Data into Features (X) and Labels (y)
X = df[['Feature1', 'Feature2']]  # Features
y = df['Label']  # Target/Label

# Step 3: Train-Test Split (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Initialize Different AI Models
logistic_model = LogisticRegression()
decision_tree_model = DecisionTreeClassifier()
random_forest_model = RandomForestClassifier()

# Step 5: Train the Models
logistic_model.fit(X_train, y_train)
decision_tree_model.fit(X_train, y_train)
random_forest_model.fit(X_train, y_train)

# Step 6: Make Predictions using Test Data
logistic_predictions = logistic_model.predict(X_test)
decision_tree_predictions = decision_tree_model.predict(X_test)
random_forest_predictions = random_forest_model.predict(X_test)

# Step 7: Define a Function to Evaluate Model Performance
def evaluate_model(y_true, y_pred, model_name):
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred)
    recall = recall_score(y_true, y_pred)
    f1 = f1_score(y_true, y_pred)
    
    print(f"\nPerformance of {model_name}:")
    print(f"Accuracy: {accuracy:.2f}")
    print(f"Precision: {precision:.2f}")
    print(f"Recall: {recall:.2f}")
    print(f"F1-Score: {f1:.2f}")

# Step 8: Evaluate the Performance of Each Model
evaluate_model(y_test, logistic_predictions, "Logistic Regression")
evaluate_model(y_test, decision_tree_predictions, "Decision Tree")
evaluate_model(y_test, random_forest_predictions, "Random Forest")
